import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;

public class Scheduling {
    public static void main(String[] args)throws IOException {

        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

        int n,temp;
        String tmp;
        System.out.println("Enter the no. of processes : ");
        n = Integer.parseInt(br.readLine());

        int []arrival = new int[n];
        int []burst = new int[n];
        String []process = new String[n];


        /** This has complexity of O(n) required for input of the details */
        for (int i = 0;i < n;i++){
            System.out.println("Enter the details for the process "+ (i+1));
            process[i] = "Process "+(i+1);
            System.out.println("Enter the arrival time : ");
            arrival[i] = Integer.parseInt(br.readLine());
            System.out.println("Enter the burst time  : ");
            burst[i] = Integer.parseInt(br.readLine());
        }

        System.out.println("\n-------------------");
        System.out.println("YOUR ENTERED VALUES");
        System.out.println("-------------------\n");

        System.out.println("Process \t Arrival Time \t Burst Time");
        System.out.println("------- \t ------------ \t ----------");
        for (int i = 0;i < n;i++){  System.out.println(process[i]+"\t\t\t"+arrival[i]+"\t\t\t  "+burst[i]);  }

        /* Sorting the processes according to the given arrival time */

        System.out.println("\n-----------------------------------------");
        System.out.println("SORTING PROCESS ACCORDING TO ARRIVAL TIME");
        System.out.println("-----------------------------------------");


        /** This sorting algorithm has O(n*n) complexity */
        for (int i = 0;i < n;i++){
            for (int j = 0;j < n-1;j++){
                if (arrival[j] > arrival[j+1]){

                    temp = arrival[j];
                    arrival[j] = arrival[j+1];
                    arrival[j+1] = temp;

                    tmp = process[j];
                    process[j] = process[j+1];
                    process[j+1] = tmp;

                    temp = burst[j];
                    burst[j] = burst[j+1];
                    burst[j+1] = temp;

                }
            }
        }

        /*Displaying the process after sorting according to arrival time */

        System.out.println("\nProcess \t Arrival Time \t Burst Time");
        System.out.println("------- \t ------------ \t ----------");
        for (int i = 0;i < n;i++){  System.out.println(process[i]+"\t\t\t"+arrival[i]+"\t\t\t  "+burst[i]);  }


       
