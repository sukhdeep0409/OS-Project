import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Scheduling {
    public static void main(String[] args)throws IOException {

        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

        int n,temp;
        String tmp;
        System.out.println("Enter the no. of processes : ");
        n = Integer.parseInt(br.readLine());

        int []arrival = new int[n];
        int []burst = new int[n];
        String []process = new String[n];


        /** This has complexity of O(n) required for input of the details */
        for (int i = 0;i < n;i++){
            System.out.println("Enter the details for the process "+ (i+1));
            process[i] = "Process "+(i+1);
            System.out.println("Enter the arrival time : ");
            arrival[i] = Integer.parseInt(br.readLine());
            System.out.println("Enter the burst time  : ");
            burst[i] = Integer.parseInt(br.readLine());
        }

        System.out.println("\n-------------------");
        System.out.println("YOUR ENTERED VALUES");
        System.out.println("-------------------\n");

        System.out.println("Process \t Arrival Time \t Burst Time");
        System.out.println("------- \t ------------ \t ----------");
        for (int i = 0;i < n;i++){  System.out.println(process[i]+"\t\t\t"+arrival[i]+"\t\t\t  "+burst[i]);  }

        /* Sorting the processes according to the given arrival time */

        System.out.println("\n-----------------------------------------");
        System.out.println("SORTING PROCESS ACCORDING TO ARRIVAL TIME");
        System.out.println("-----------------------------------------");


        /** This sorting algorithm has O(n*n) complexity */
        for (int i = 0;i < n;i++){
            for (int j = 0;j < n-1;j++){
                if (arrival[j] > arrival[j+1]){

                    temp = arrival[j];
                    arrival[j] = arrival[j+1];
                    arrival[j+1] = temp;

                    tmp = process[j];
                    process[j] = process[j+1];
                    process[j+1] = tmp;

                    temp = burst[j];
                    burst[j] = burst[j+1];
                    burst[j+1] = temp;

                }
            }
        }

        /*Displaying the process after sorting according to arrival time */

        System.out.println("\nProcess \t Arrival Time \t Burst Time");
        System.out.println("------- \t ------------ \t ----------");
        for (int i = 0;i < n;i++){  System.out.println(process[i]+"\t\t\t"+arrival[i]+"\t\t\t  "+burst[i]);  }

        int []waiting = new int[n];
        int []turn = new int[n];

        /*Sorting the process according to the priority */


        /** This is the same algorithm used above having O(n*n) complexity */
        int sum = 0;
        for (int i = 0;i < n;i++){
            sum += burst[i];
            for (int j = i+1;j < n-1;j++){
                if(sum > arrival[j]){
                    int c = 1 + ((sum - arrival[j]) / burst[j]);              //implementing formula required
                    int c1 = 1 + ((sum   - arrival[j+1]) / burst[j+1]);       //implementing formula required
                    if(c1 > c){
                        temp = arrival[j];
                        arrival[j] = arrival[j+1];
                        arrival[j+1] =temp;

                        tmp = process[j];
                        process[j] = process[j+1];
                        process[j+1] = tmp;

                        temp = burst[j];
                        burst[j] = burst[j+1];
                        burst[j+1] = temp;
                    }
                }
            }
        }

        /*Calculating the waiting time and turnaround time */

        /** This requires calculation of respective details and has O(n) complexity */
        int totalsum=arrival[0];
        for (int i = 0;i < n;i++){
            waiting[i] = (totalsum - arrival[i]);
            turn[i] = burst[i] + waiting[i];
            totalsum += burst[i];
        }

        /*Displaying the process after sorting according to the priority */

        System.out.println("\n--------------------------------------------------");
        System.out.println("DISPLAYING THE RESULT AFTER IMPLEMENTING ALGORITHM");
        System.out.println("--------------------------------------------------");

        System.out.println("\nProcess \t Arrival Time \t Burst Time \t Waiting Time \t Turnaround Time");
        System.out.println("------- \t ------------ \t ---------- \t ------------ \t ---------------");
        for (int i = 0;i < n;i++)
            System.out.println(process[i]+"\t\t\t"+arrival[i]+"\t\t\t  "+burst[i]+"\t\t\t\t  "+waiting[i]+"\t\t\t\t    "+turn[i]);

        /* Displaying the average waiting time and average turnaround time */

        double waiting_avg = 0.0;
        double turn_avg = 0.0;


        /** It displays the average of the calculated details */
        for (int i = 0;i < n;i++) {
            waiting_avg = waiting_avg + waiting[i];
            turn_avg = turn_avg + turn[i];
        }

        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(2);
        System.out.println();

        System.out.println("\n---------------------------");
        System.out.println("Average waiting time : " + df.format(waiting_avg/n));
        System.out.println("Average turnaround time : " + df.format(turn_avg/n));
        System.out.println("---------------------------");
    }
}
